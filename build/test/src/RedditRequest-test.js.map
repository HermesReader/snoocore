{"version":3,"sources":["src/RedditRequest-test.js"],"names":[],"mappings":"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","file":"src/RedditRequest-test.js","sourcesContent":["/* describe, it, afterEach, beforeEach */\n\nimport when from 'when';\n\nimport chai from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nchai.use(chaiAsPromised);\nlet expect = chai.expect;\n\nimport config from '../config';\nimport util from './util';\n\nimport Endpoint from '../../src/Endpoint';\n\ndescribe(__filename, function () {\n\n  this.timeout(config.testTimeout);\n\n  describe('buildHeaders()', function() {\n    it.skip('...');\n  });\n\n  describe('callRedditApi()', function() {\n    it.skip('...');\n  });\n\n  describe('getResponseError()', function() {\n    it('should get a proper response error', function() {\n      var redditRequest = util.getScriptRedditRequest([ 'identity', 'modconfig' ]);\n\n      var message = 'oh hello there';\n      var response = { _status: 200, _body: 300 };\n\n      var userConfig = util.getScriptUserConfig();\n      var endpoint = new Endpoint(userConfig,\n                                  'get',\n                                  '/some/path',\n                                  { some: 'args' });\n\n      var responseError = redditRequest.getResponseError(message,\n                                                         response,\n                                                         endpoint);\n\n      expect(responseError instanceof Error);\n      expect(responseError.status).to.eql(200);\n      expect(responseError.url).to.eql('https://oauth.reddit.com/some/path');\n      expect(responseError.args).to.eql({ some: 'args' });\n\n      expect(responseError.message.indexOf('oh hello there')).to.not.eql(-1);\n      expect(responseError.message.indexOf('Response Status')).to.not.eql(-1);\n      expect(responseError.message.indexOf('Endpoint URL')).to.not.eql(-1);\n      expect(responseError.message.indexOf('Arguments')).to.not.eql(-1);\n      expect(responseError.message.indexOf('Response Body')).to.not.eql(-1);\n    });\n  });\n\n  describe('handleServerErrorResponse()', function() {\n\n    it('should retry an endpoint 3 times then fail', function() {\n\n      // allow self signed certs for our test server\n      process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;\n\n      var reddit = util.getScriptInstance([ 'identity', 'read' ]);\n\n      return reddit.auth().then(function() {\n\n        // Switch servers to use error test server (returns 500 errors every time)\n        reddit._userConfig.serverOAuth = 'localhost:' + config.testServer.serverErrorPort;\n        reddit._userConfig.serverWWW = 'localhost:' + config.testServer.serverErrorPort;\n\n        var retryAttempts = 3; // let's only retry 3 times to keep it short\n\n        return when.promise(function(resolve, reject) {\n          var hotPromise;\n\n          // resolve once we get the server error instance\n          reddit.on('server_error', function(error) {\n\n            expect(error instanceof Error);\n            expect(error.retryAttemptsLeft).to.equal(--retryAttempts);\n            expect(error.status).to.equal(500);\n            expect(error.url).to.equal('https://localhost:3001/hot');\n            expect(error.args).to.eql({});\n            expect(error.body).to.equal('');\n\n            // resolve once we have reached our retry attempt and get an error\n            // we should not resolve this promise! We expect it to fail!!\n            hotPromise.done(reject, resolve);\n          });\n\n          hotPromise = reddit('/hot').get(void 0, {\n            retryAttempts: retryAttempts,\n            retryDelay: 500 // no need to make this take longer than necessary\n          });\n        });\n\n      }).then(function(error) {\n        expect(error.message.indexOf('All retry attempts exhausted')).to.not.eql(-1);\n      }).finally(function() {\n        // don't allow self signed certs again\n        delete process.env.NODE_TLS_REJECT_UNAUTHORIZED;\n      });\n\n    });\n\n    it('should retry an endpoint on HTTP 5xx', function() {\n\n      // allow self signed certs for our test server\n      process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;\n\n      var reddit = util.getScriptInstance([ 'identity', 'read' ]);\n\n      // create a reference to the actual reddit servers\n      var redditWWW = 'www.reddit.com';\n      var redditOAuth = 'oauth.reddit.com';\n\n      return reddit.auth().then(function() {\n\n        // Switch servers to use error test server (returns 500 errors every time)\n        reddit._userConfig.serverOAuth = 'localhost:' + config.testServer.serverErrorPort;\n        reddit._userConfig.serverWWW = 'localhost:' + config.testServer.serverErrorPort;\n\n        return when.promise(function(resolve, reject) {\n          var hotPromise;\n\n          // resolve once we get the server error instance\n          reddit.on('server_error', function(error) {\n\n            expect(error instanceof Error);\n            expect(error.retryAttemptsLeft).to.equal(59);\n            expect(error.status).to.equal(500);\n            expect(error.url).to.equal('https://localhost:3001/hot');\n            expect(error.args).to.eql({});\n            expect(error.body).to.equal('');\n\n            // don't allow self signed certs again\n            delete process.env.NODE_TLS_REJECT_UNAUTHORIZED;\n\n            // --\n            // Very dirty way to hot swap the endpoint's url.\n            // Please do not use this in actual code -- this is a test case\n            reddit._userConfig.serverWWW = redditWWW;\n            reddit._userConfig.serverOAuth = redditOAuth;\n            expect(reddit._userConfig.serverWWW).to.eql(redditWWW);\n            expect(reddit._userConfig.serverOAuth).to.eql(redditOAuth);\n            var modifiedEndpoint = new Endpoint(reddit._userConfig, 'get', 'hot');\n            error.endpoint.url = modifiedEndpoint.url;\n            // -- end filth\n\n            // this should resolve now that the servers are correct\n            hotPromise.done(resolve);\n          });\n\n          process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0; // allow self signed certs\n          hotPromise = reddit('/hot').get();\n        });\n\n      });\n    });\n  });\n\n  describe('handleClientErrorResponse()', function() {\n\n    it('should handle data.json.errors field', function() {\n\n      var reddit = util.getScriptInstance([ 'identity', 'modconfig' ]);\n\n      return reddit.auth().then(function() {\n        return reddit('/r/$subreddit/about/edit.json').get({\n          $subreddit: config.reddit.testSubreddit\n        });\n      }).then(function(result) {\n\n        var data = result.data;\n\n        data.api_type = 'json'; // must be the string 'json'\n\n        return reddit('/api/site_admin').post(data);\n\n      }).catch(function(error) {\n        expect(error.message.indexOf('BAD_SR_NAME')).to.not.equal(-1);\n      });\n    });\n\n    // Reddit no longer throws an 'IMAGE_ERROR', so this test\n    // no longer works properly. We need to find another instance\n    // of the data.errors or remove this test completly\n    it.skip('should handle data.errors field', function() {\n      var reddit = util.getScriptInstance([ 'modconfig' ]);\n\n      return reddit.auth().then(function() {\n        return reddit('/r/$subreddit/api/upload_sr_img').post({\n          $subreddit: config.reddit.testSubreddit,\n          file: Snoocore.file('fakename', 'image/png', 'fake image data'),\n          header: 0,\n          img_type: 'png',\n          name: 'test'\n        });\n      }).catch(function(error) {\n        expect(error.message.indexOf('IMAGE_ERROR')).to.not.equal(-1);\n      });\n\n    });\n\n    it('should explain that a scope is missing', function() {\n      var reddit = util.getScriptInstance([ 'read' ]);\n\n      return reddit.auth().then(function() {\n        return reddit('/api/v1/me').get();\n      }).then(function() {\n        throw new Error('expected this to fail with invalid scope');\n      }).catch(function(error) {\n        return expect(error.message.indexOf(\n          'Insufficient scopes provided for this call')).to.not.equal(-1);\n      });\n    });\n\n    it('should give an assortment of reasons why call errored', function() {\n\n      var reddit = util.getScriptInstance();\n\n      return reddit.auth().then(function() {\n        return reddit('/api/saved_categories').get();\n      }).then(function() {\n        throw new Error('expected this to fail (missing reddit gold)');\n      }).catch(function(error) {\n        return expect(error.message.indexOf(\n          'Is the user missing reddit gold?')).to.not.equal(-1);\n      });\n    });\n\n    it('should spit out more information when we come to an error (url & args used)', function() {\n      var reddit = util.getScriptInstance([ 'identity', 'read' ]);\n\n      return reddit.auth().then(function() {\n        return reddit('/comments/$article').get({\n          sort: 'hot',\n          context: 8,\n          $article: 'invalid_article_error'\n        });\n      }).then(function() {\n        throw new Error('expected this to fail with invalid scope');\n      }).catch(function(error) {\n        expect(error.message.indexOf('Response Body')).to.not.equal(-1);\n        expect(error.message.indexOf('Endpoint URL')).to.not.equal(-1);\n        expect(error.message.indexOf('Arguments')).to.not.equal(-1);\n        expect(error.status).to.eql(404);\n      });\n    });\n\n  });\n\n  describe('handleSuccessResponse()', function() {\n    it.skip('...');\n  });\n\n  describe('handleRedditResponse()', function() {\n    it.skip('...');\n  });\n\n  describe('getListing()', function() {\n\n    it('should get the front page listing and nav through it (basic)', function() {\n\n      var reddit = util.getScriptInstance([ 'read' ]);\n\n      // or reddit('/hot').listing\n      return reddit('/hot').listing().then(function(slice) {\n        expect(slice.get).to.be.a('object');\n        expect(slice.after).to.be.a('string');\n        expect(slice.before).to.equal(null);\n        expect(slice.next).to.be.a('function');\n        expect(slice.previous).to.be.a('function');\n        expect(slice.start).to.be.a('function');\n\n        expect(slice.count).to.equal(0);\n        return slice.next();\n      }).then(function(slice) {\n        expect(slice.count).to.equal(25);\n        return slice.next();\n      }).then(function(slice) {\n        expect(slice.count).to.equal(50);\n        return slice.previous();\n      }).then(function(slice) {\n        expect(slice.count).to.equal(25);\n        return slice.start();\n      }).then(function(slice) {\n        expect(slice.count).to.equal(0);\n      });\n\n    });\n\n    it('should handle empty listings', function() {\n\n      var reddit = util.getScriptInstance([ 'read', 'history' ]);\n\n      return reddit('/user/$username/$where').listing({\n        $username: 'emptyListing', // an account with no comments\n        $where: 'comments'\n      }).then(function(slice) {\n        expect(slice.empty).to.equal(true);\n      });\n    });\n\n    it('should requery a listing after changes have been made', function() {\n\n      var reddit = util.getScriptInstance([ 'read', 'history' ]);\n\n      // @TODO we need a better way to test this (without using captcha's)\n      // as of now it is requerying empty comments of a user which runs the\n      // code in question but it is not the best test\n\n      var getComments = reddit('/user/$username/$where').listing;\n      var options = { $username: 'emptyListing', $where: 'comments' };\n\n      return getComments(options).then(function(thatSlice) {\n        return getComments(options).then(function() {\n          return thatSlice.requery();\n        }).then(function(thisSlice) {\n          expect(thatSlice.empty).to.equal(thisSlice.empty);\n        });\n      });\n    });\n\n    it('should handle listings with multiple listings', function() {\n\n      var reddit = util.getScriptInstance([ 'read' ]);\n\n      // just get the data back to compare it with the listing\n      return reddit('duplicates/$article').get({\n        limit: 2,\n        $article: '13wml3'\n      }).then(function(getResult) {\n        // check that the first result matches what we get back\n        return reddit('duplicates/$article').listing({\n          limit: 2,\n          $article: '13wml3'\n        }, { listingIndex: 0 }).then(function(slice) {\n          // slice.get should equal the getResult\n          expect(slice.get).to.eql(getResult);\n\n          // should equal the first listings children\n          expect(slice.allChildren).to.eql(getResult[0].data.children);\n\n          // check the second index\n          return reddit('duplicates/$article').listing({\n            limit: 2,\n            $article: '13wml3'\n          }, { listingIndex: 1 }).then(function(slice) {\n            // slice.get should equal the getResult\n            expect(slice.get).to.eql(getResult);\n\n            // should equal the first listings children\n            expect(slice.allChildren).to.eql(getResult[1].data.children);\n          });\n        });\n      });\n\n    });\n\n    it('throw error - listing has multiple listings w/o specifying index', function() {\n      var reddit = util.getScriptInstance([ 'read' ]);\n\n      return reddit('duplicates/$article').listing({\n        limit: 2,\n        $article: '13wml3'\n      }).then(function() {\n        throw new Error('this should have failed');\n      }).catch(function(error) {\n        expect(error.message).to.equal('Must specify a `listingIndex` for this listing.');\n      });\n    });\n\n  });\n\n  describe('path()', function() {\n\n    it('should allow a \"path\" syntax', function() {\n\n      var redditRequest = util.getScriptRedditRequest([ 'read' ]);\n      process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n      return redditRequest.path('/r/$subreddit/hot')\n                          .get({ $subreddit: 'aww' })\n                          .then(function(result) {\n                            expect(result).to.haveOwnProperty('kind', 'Listing');\n                          });\n    });\n\n    it('should tolerate a missing beginning slash', function() {\n      var redditRequest = util.getScriptRedditRequest([ 'read' ]);\n      return redditRequest\n                   .path('r/$subreddit/hot')\n                   .get({ $subreddit: 'aww' })\n                   .then(function(result) {\n                     expect(result).to.haveOwnProperty('kind', 'Listing');\n                   });\n    });\n\n    it('should allow a \"path\" syntax (where reddit === path fn)', function() {\n      var reddit = util.getScriptInstance([ 'read' ]);\n      return reddit('/r/$subreddit/hot')\n                       .get({ $subreddit: 'aww' })\n                       .then(function(result) {\n                         expect(result).to.haveOwnProperty('kind', 'Listing');\n                       });\n    });\n\n    it('should allow for alternate placeholder names', function() {\n      var reddit = util.getScriptInstance([ 'read' ]);\n      return reddit('/r/$sub/hot').get({ $sub: 'aww' }).then(function(result) {\n        expect(result).to.haveOwnProperty('kind', 'Listing');\n      });\n    });\n\n    it('should allow for embedding of url parameters', function() {\n      var reddit = util.getScriptInstance([ 'read' ]);\n      return reddit('/r/aww/hot').get().then(function(result) {\n        expect(result).to.haveOwnProperty('kind', 'Listing');\n      });\n    });\n\n    it('should allow for embedding of url parameters (listings)', function() {\n      var reddit = util.getScriptInstance([ 'read', 'history' ]);\n      return reddit('/user/kemitche/comments').listing({\n        sort: 'new'\n      }).then(function(result) {\n        expect(result).to.haveOwnProperty('empty', false);\n      });\n    });\n\n    it('should allow a variable at the beginning of a path', function() {\n      var reddit = util.getScriptInstance([ 'read' ]);\n      return reddit('/$sort').get({\n        $sort: 'top'\n      }).then(function(result) {\n        expect(result).to.haveOwnProperty('kind', 'Listing');\n      });\n    });\n\n  });\n\n});\n"],"sourceRoot":"/source/"}