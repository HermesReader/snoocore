{"version":3,"sources":["Throttle.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;oBAaiB,MAAM;;;;qBACL,YAAY;;;;AAE9B,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;AAC1B,SAAS,QAAQ,CAAC,UAAU,EAAE;;AAE5B,MAAI,IAAI,GAAG,IAAI,CAAC;;;AAGhB,MAAI,CAAC,WAAW,GAAG,UAAU,IAAI,IAAI,CAAC;;;;;;;;AAStC,MAAI,CAAC,cAAc,GAAG,CAAC,CAAC;;AAExB,MAAI,CAAC,IAAI,GAAG,YAAW;;AAErB,QAAI,YAAY,GAAG,mBAAM,IAAI,CAAC,cAAc,CAAC,CAAC;;;AAG9C,QAAI,CAAC,cAAc,IAAI,IAAI,CAAC,WAAW,CAAC;;;;AAIxC,cAAU,CAAC,YAAW;AACpB,UAAI,CAAC,cAAc,IAAI,IAAI,CAAC,WAAW,CAAC;KACzC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;;AAErB,WAAO,YAAY,CAAC;GACrB,CAAC;;AAEF,SAAO,IAAI,CAAC;CACb","file":"Throttle.js","sourcesContent":["/*\n   A basic throttle manager. Exposes 1 functoin `wait` that\n   will return a promise that resolves once we've waited the proper\n   amount of time, e.g.\n\n   var throttle = new Throttle();\n\n   throttle.wait() // resolves after 1ms\n   throttle.wait() // resolves after 10001ms\n   throttle.wait() // resolves after 2001ms\n\n */\n\nimport when from 'when';\nimport delay from 'when/delay';\n\nmodule.exports = Throttle;\nfunction Throttle(throttleMs) {\n\n  var self = this;\n\n  // default to 1000ms delay\n  self._throttleMs = throttleMs || 1000;\n\n  /*\n     The current throttle delay before a request will go through\n     increments every time a call is made, and is reduced when a\n     call finishes.\n\n     Time is added & removed based on the throttle variable.\n   */\n  self._throttleDelay = 1;\n\n  self.wait = function() {\n    // resolve this promise after the current throttleDelay\n    var delayPromise = delay(self._throttleDelay);\n\n    // add throttleMs to the total throttleDelay\n    self._throttleDelay += self._throttleMs;\n\n    // after throttleMs time, subtract throttleMs from\n    // the throttleDelay\n    setTimeout(function() {\n      self._throttleDelay -= self._throttleMs;\n    }, self._throttleMs);\n\n    return delayPromise;\n  };\n\n  return self;\n}\n"],"sourceRoot":"/source/"}