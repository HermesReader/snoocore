{"version":3,"sources":["Endpoint.js"],"names":[],"mappings":"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","file":"Endpoint.js","sourcesContent":["import path from 'path';\n\nimport utils from './utils';\n\n// Precompiled list of properties for specific endpoints\nimport endpointProperties from '../endpointProperties';\n\n// Build a more parseable tree for the properties. Built here vs. simply\n// requiring an already build tree to save on bytes.\nconst PROPERTY_TREE = buildPropertyTree(endpointProperties);\n\nexport default class Endpoint {\n\n  constructor (userConfig, method, path, givenArgs, givenContextOptions) {\n\n    this._userConfig = userConfig;\n\n    this.method = method;\n    this.path = path;\n\n    this.properties = this.getProperties();\n\n    // if this endpoint requires the `api_type` string of \"json\"\n    // in it's request\n    this.needsApiTypeJson = this.properties.indexOf('a') !== -1;\n    this.contextOptions = this.normalizeContextOptions(givenContextOptions);\n    this.givenArgs = givenArgs || {};\n    this.args = this.buildArgs();\n    this.url = this.buildUrl();\n  }\n\n  getProperties() {\n    // remove leading slash if any\n    let sections = this.path.replace(/^\\//, '').split('/');\n\n    // the top level of the endpoint tree that we will traverse down\n    let leaf = PROPERTY_TREE;\n\n    let section;\n\n    for (let i = 0, len = sections.length; i < len; ++i) {\n      section = sections[i];\n\n      // We can go down further in the tree\n      if (typeof leaf[section] !== 'undefined') {\n        leaf = leaf[section];\n        continue;\n      }\n\n      // Check if there is a placeholder we can go down\n      if (typeof leaf['$'] !== 'undefined') {\n        leaf = leaf['$'];\n        continue;\n      }\n\n      break; // else, dead end\n    }\n\n    if (leaf._endpoints && leaf._endpoints[this.method]) {\n      return leaf._endpoints[this.method];\n    }\n\n    return '';\n  }\n\n  /*\n     Returns a set of options that effect how each call to reddit behaves.\n   */\n  normalizeContextOptions(givenContextOptions) {\n\n    let cOptions = givenContextOptions || {};\n\n    // by default we do not bypass authentication\n    cOptions.bypassAuth = utils.thisOrThat(cOptions.bypassAuth, false);\n\n    // decode html enntities for this call?\n    cOptions.decodeHtmlEntities = utils.thisOrThat(cOptions.decodeHtmlEntities,\n                                                   this._userConfig.decodeHtmlEntities);\n\n    // how many attempts left do we have to retry an endpoint?\n\n    // use the given retryAttemptsLeft, or the retryAttempts passed in the\n    // context options if not specified\n    cOptions.retryAttemptsLeft = utils.thisOrThat(cOptions.retryAttemptsLeft,\n                                                  cOptions.retryAttempts);\n\n    // use the given retryAttemptsLeft, or the retryAttempts passed in the\n    // user configuration\n    cOptions.retryAttemptsLeft = utils.thisOrThat(cOptions.retryAttemptsLeft,\n                                                  this._userConfig.retryAttempts);\n\n    // delay between retrying an endpoint\n    cOptions.retryDelay = utils.thisOrThat(cOptions.retryDelay,\n                                           this._userConfig.retryDelay);\n\n    // how many reauthentication attempts do we have left?\n    cOptions.reauthAttemptsLeft = utils.thisOrThat(cOptions.reauthAttemptsLeft,\n                                                   cOptions.retryAttemptsLeft);\n\n    return cOptions;\n  }\n\n  /*\n     Build the arguments that we will send to reddit in our\n     request. These customize the request that we send to reddit\n   */\n  buildArgs() {\n    let args = {};\n\n    // Skip any url parameters (e.g. items that begin with $)\n    for (let key in this.givenArgs) {\n      if (key.substring(0, 1) !== '$') {\n        args[key] = this.givenArgs[key];\n      }\n    }\n\n    let apiType = utils.thisOrThat(this.contextOptions.api_type,\n                                   this._userConfig.apiType);\n\n    if (apiType && this.needsApiTypeJson) {\n      args.api_type = apiType;\n    }\n\n    return args;\n  }\n\n  /*\n     Builds the URL that we will query reddit with.\n   */\n  buildUrl() {\n    let serverOAuth = utils.thisOrThat(this.contextOptions.serverOAuth,\n                                       this._userConfig.serverOAuth);\n\n    let url = 'https://' + path.join(serverOAuth, this.path);\n    url = replaceUrlParams(url, this.givenArgs);\n    return url;\n  }\n\n}\n\n\n/*\n   Converts a list of endpoint properties into a tree for\n   faster traversal during runtime.\n */\nexport function buildPropertyTree(endpointProperties) {\n  let propertyTree = {};\n\n  Object.keys(endpointProperties).forEach(endpointPath => {\n\n    // get the properties for this endpoint\n    let properties = endpointProperties[endpointPath];\n\n    // get the sections to traverse down for this endpoint\n    let pathSections = endpointPath.split('/');\n\n    // the first element in this list is the endpoint method\n    let method = pathSections.shift().toLowerCase();\n\n    let leaf = propertyTree; // start at the root\n\n    // move down to where we need to be in the chain for this endpoint\n    let i = 0;\n    let len = pathSections.length;\n\n    for (; i < len - 1; ++i) {\n      if (typeof leaf[pathSections[i]] === 'undefined') {\n        leaf[pathSections[i]] = {};\n      }\n      leaf = leaf[pathSections[i]];\n    }\n\n    // push the endpoint to this section of the tree\n    if (typeof leaf[pathSections[i]] === 'undefined') {\n      leaf[pathSections[i]] = { _endpoints: {} };\n    }\n\n\n    leaf[pathSections[i]]._endpoints[method] = properties;\n  });\n\n  return propertyTree;\n}\n\n\n/*\n   Takes an url, and an object of url parameters and replaces\n   them, e.g.\n\n   endpointUrl:\n   'http://example.com/$foo/$bar/test.html'\n\n   this.givenArgs: { $foo: 'hello', $bar: 'world' }\n\n   would output:\n\n   'http://example.com/hello/world/test.html'\n */\nexport function replaceUrlParams(endpointUrl, givenArgs) {\n  // nothing to replace!\n  if (endpointUrl.indexOf('$') === -1) {\n    return endpointUrl;\n  }\n\n  // pull out letiables from the url\n  let params = endpointUrl.match(/\\$[\\w\\.]+/g);\n\n  // replace with the argument provided\n  params.forEach(param => {\n    if (typeof givenArgs[param] === 'undefined') {\n      throw new Error('missing required url parameter ' + param);\n    }\n    endpointUrl = endpointUrl.replace(param, givenArgs[param]);\n  });\n\n  return endpointUrl;\n}\n"],"sourceRoot":"/source/"}