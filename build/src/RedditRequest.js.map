{"version":3,"sources":["RedditRequest.js"],"names":[],"mappings":"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","file":"RedditRequest.js","sourcesContent":["\n// node modules\nimport util from 'util';\nimport events from 'events';\nimport urlLib from 'url';\n\n// npm modules\nimport when from 'when';\nimport delay from 'when/delay';\nimport he from 'he';\n\n// our modules\nimport Request from './Request';\nimport Endpoint from './Endpoint';\n\n/*\n   A collection of functions that deal with requesting data from the\n   reddit API.\n */\nexport default class RedditRequest extends events.EventEmitter {\n\n  constructor(userConfig, request, oauth, oauthAppOnly) {\n    super();\n    this._request = request;\n    this._userConfig = userConfig;\n    this._oauth = oauth;\n    this._oauthAppOnly = oauthAppOnly;\n  }\n\n  /*\n     Currently application only?\n   */\n  isApplicationOnly() {\n    return !this._oauth.isAuthenticated();\n  }\n\n  /*\n     Builds up the headers for an endpoint.\n   */\n  buildHeaders(endpoint) {\n    let headers = {};\n\n    if (this._userConfig.isNode) {\n      // Can't set User-Agent in browser\n      headers['User-Agent'] = this._userConfig.userAgent;\n    }\n\n    if (endpoint.contextOptions.bypassAuth || this.isApplicationOnly()) {\n      headers['Authorization'] = this._oauthAppOnly.getAuthorizationHeader();\n    } else {\n      headers['Authorization'] = this._oauth.getAuthorizationHeader();\n    }\n\n    return headers;\n  }\n\n  /*\n     Call the reddit api.\n   */\n  callRedditApi(endpoint) {\n\n    let parsedUrl = urlLib.parse(endpoint.url);\n\n    let reqOptions = {\n      method: endpoint.method.toUpperCase(),\n      hostname: parsedUrl.hostname,\n      path: parsedUrl.path,\n      headers: this.buildHeaders(endpoint)\n    };\n\n    if (parsedUrl.port) {\n      reqOptions.port = parsedUrl.port;\n    }\n\n    return this._request.https(reqOptions, endpoint.args).then(res => {\n      return this.handleRedditResponse(res, endpoint);\n    });\n  }\n\n  /*\n     Returns a uniform error for all response errors.\n   */\n  getResponseError(message, response, endpoint) {\n\n    let responseError = new Error([\n      message,\n      '>>> Response Status: ' + response._status,\n      '>>> Endpoint URL: '+ endpoint.url,\n      '>>> Arguments: ' + JSON.stringify(endpoint.args, null, 2),\n      '>>> Response Body:',\n      response._body\n    ].join('\\n\\n'));\n\n    responseError.url = endpoint.url;\n    responseError.args = endpoint.args;\n    responseError.status = response._status;\n    responseError.body = response._body;\n    responseError.endpoint = endpoint;\n\n    return responseError;\n  }\n\n  /*\n     Handle a reddit 500 / server error. This will try to call the endpoint again\n     after the given retryDelay. If we do not have any retry attempts left, it\n     will reject the promise with the error.\n   */\n  handleServerErrorResponse(response, endpoint) {\n\n    endpoint.contextOptions.retryAttemptsLeft--;\n\n    let responseError = this.getResponseError('Server Error Response',\n                                              response,\n                                              endpoint);\n\n    responseError.retryAttemptsLeft = endpoint.contextOptions.retryAttemptsLeft;\n\n    this.emit('server_error', responseError);\n\n    if (endpoint.contextOptions.retryAttemptsLeft <= 0) {\n      responseError.message = ('All retry attempts exhausted.\\n\\n' +\n                               responseError.message);\n      return when.reject(responseError);\n    }\n\n    return delay(endpoint.contextOptions.retryDelay).then(() => {\n      return this.callRedditApi(endpoint);\n    });\n  }\n\n  /*\n     Handle a reddit 4xx / client error. This is usually caused when our\n     access_token has expired.\n\n     If we can't renew our access token, we throw an error / emit the\n     'access_token_expired' event that users can then handle to\n     re-authenticatet clients\n\n     If we can renew our access token, we try to reauthenticate, and call the\n     reddit endpoint again.\n   */\n  handleClientErrorResponse(response, endpoint) {\n\n    // - - -\n    // Check headers for more specific errors.\n\n    let wwwAuth = response._headers['www-authenticate'];\n\n    if (wwwAuth && wwwAuth.indexOf('insufficient_scope') !== -1) {\n      return when.reject(this.getResponseError(\n        'Insufficient scopes provided for this call',\n        response,\n        endpoint));\n    }\n\n    // - - -\n    // Parse the response for more specific errors.\n\n    try {\n      let data = JSON.parse(response._body);\n\n      if (data.reason === 'USER_REQUIRED') {\n        let msg = 'Must be authenticated with a user to make this call';\n        return when.reject(this.getResponseError(msg, response, endpoint));\n      }\n\n    } catch(e) {}\n\n    // - - -\n    // Access token has expired\n\n    if (response._status === 401) {\n\n      this.emit('access_token_expired');\n\n      let canRenewAccessToken = (this.isApplicationOnly() ||\n                                 this._oauth.hasRefreshToken() ||\n                                 this._userConfig.isOAuthType('script'));\n\n      if (!canRenewAccessToken) {\n        let errmsg = 'Access token has expired. Listen for ' +\n                     'the \"access_token_expired\" event to ' +\n                     'handle this gracefully in your app.';\n        return when.reject(this.getResponseError(errmsg, response, endpoint));\n      } else {\n\n        // Renew our access token\n\n        --endpoint.contextOptions.reauthAttemptsLeft;\n\n        if (endpoint.contextOptions.reauthAttemptsLeft <= 0) {\n          return when.reject(this.getResponseError(\n            'Unable to refresh the access_token.',\n            response,\n            endpoint));\n        }\n\n        let reauth;\n\n        // If we are application only, or are bypassing authentication\n        // therefore we're using application only OAuth\n        if (this.isApplicationOnly() || endpoint.contextOptions.bypassAuth) {\n          reauth = this._oauthAppOnly.applicationOnlyAuth();\n        } else {\n\n          // If we have been authenticated with a permanent refresh token use it\n          if (this._oauth.hasRefreshToken()) {\n            reauth = this._oauth.refresh();\n          }\n\n          // If we are OAuth type script we can call `.auth` again\n          if (this._userConfig.isOAuthType('script')) {\n            reauth = this._oauth.auth();\n          }\n\n        }\n\n        return reauth.then(() => {\n          return this.callRedditApi(endpoint);\n        });\n\n      }\n    }\n\n    // - - -\n    // At the end of the day, we just throw an error stating that there\n    // is nothing we can do & give general advice\n    return when.reject(this.getResponseError(\n      ('This call failed. ' +\n       'Is the user missing reddit gold? ' +\n       'Trying to change a subreddit that the user does not moderate? ' +\n       'This is an unrecoverable error.'),\n      response,\n      endpoint));\n  }\n\n  /*\n     Handle reddit response status of 2xx.\n\n     Finally return the data if there were no problems.\n   */\n  handleSuccessResponse(response, endpoint) {\n    let data = response._body || '';\n\n    if (endpoint.contextOptions.decodeHtmlEntities) {\n      data = he.decode(data);\n    }\n\n    // Attempt to parse some JSON, otherwise continue on (may be empty, or text)\n    try {\n      data = JSON.parse(data);\n    } catch(e) {}\n\n    return when.resolve(data);\n  }\n\n  /*\n     Handles letious reddit response cases.\n   */\n  handleRedditResponse(response, endpoint) {\n\n    switch(String(response._status).substring(0, 1)) {\n      case '5':\n        return this.handleServerErrorResponse(response, endpoint);\n      case '4':\n        return this.handleClientErrorResponse(response, endpoint);\n      case '2':\n        return this.handleSuccessResponse(response, endpoint);\n    }\n\n    return when.reject(new Error(\n      'Invalid reddit response status of ' + response._status));\n  }\n\n  /*\n     Listing support.\n   */\n  getListing(endpoint) {\n\n    // number of results that we have loaded so far. It will\n    // increase / decrease when calling next / previous.\n    let count = 0;\n    let limit = endpoint.args.limit || 25;\n    // keep a reference to the start of this listing\n    let start = endpoint.args.after || null;\n\n    let getSlice = (endpoint) => {\n\n      return this.callRedditApi(endpoint).then(result => {\n\n        let slice = {};\n        let listing = result || {};\n\n        slice.get = result || {};\n\n        if (result instanceof Array) {\n          if (typeof endpoint.contextOptions.listingIndex === 'undefined') {\n            throw new Error('Must specify a `listingIndex` for this listing.');\n          }\n\n          listing = result[endpoint.contextOptions.listingIndex];\n        }\n\n        slice.count = count;\n\n        slice.before = listing.data.before || null;\n        slice.after = listing.data.after || null;\n        slice.allChildren = listing.data.children || [];\n\n        slice.empty = slice.allChildren.length === 0;\n\n        slice.children = slice.allChildren.filter(function(child) {\n          return !child.data.stickied;\n        });\n\n        slice.stickied = slice.allChildren.filter(function(child) {\n          return child.data.stickied;\n        });\n\n        slice.next = () => {\n          count += limit;\n\n          let newArgs = endpoint.args;\n          newArgs.before = null;\n          newArgs.after = slice.children[slice.children.length - 1].data.name;\n          newArgs.count = count;\n          return getSlice(new Endpoint(this._userConfig,\n                                       endpoint.method,\n                                       endpoint.path,\n                                       newArgs,\n                                       endpoint.contextOptions));\n        };\n\n        slice.previous = () => {\n          count -= limit;\n\n          let newArgs = endpoint.args;\n          newArgs.before = slice.children[0].data.name;\n          newArgs.after = null;\n          newArgs.count = count;\n          return getSlice(new Endpoint(this._userConfig,\n                                       endpoint.method,\n                                       endpoint.path,\n                                       newArgs,\n                                       endpoint.contextOptions));\n        };\n\n        slice.start = () => {\n          count = 0;\n\n          let newArgs = endpoint.args;\n          newArgs.before = null;\n          newArgs.after = start;\n          newArgs.count = count;\n          return getSlice(new Endpoint(this._userConfig,\n                                       endpoint.method,\n                                       endpoint.path,\n                                       newArgs,\n                                       endpoint.contextOptions));\n        };\n\n        slice.requery = () => {\n          return getSlice(endpoint);\n        };\n\n        return slice;\n      });\n\n    };\n\n    return getSlice(endpoint);\n  }\n\n  /*\n     Enable path syntax support, e.g. this.path('/path/to/$endpoint/etc')\n\n     Can take an url as well, but the first part of the url is chopped\n     off because it is not needed. We will always use the server oauth\n     to call the API...\n\n     e.g. https://www.example.com/api/v1/me\n\n     will only use the path: /api/v1/me\n   */\n  path(urlOrPath) {\n\n    let parsed = urlLib.parse(urlOrPath);\n    let path = parsed.pathname;\n\n    let calls = {};\n\n    ['get', 'post', 'put', 'patch', 'delete', 'update'].forEach(verb => {\n      calls[verb] = (userGivenArgs, userContextOptions) => {\n        return this.callRedditApi(new Endpoint(this._userConfig,\n                                               verb,\n                                               path,\n                                               userGivenArgs,\n                                               userContextOptions));\n      };\n    });\n\n    // Add listing support\n    calls.listing = (userGivenArgs, userContextOptions) => {\n      return this.getListing(new Endpoint(this._userConfig,\n                                          'get',\n                                          path,\n                                          userGivenArgs,\n                                          userContextOptions));\n    };\n\n    return calls;\n  }\n\n}\n"],"sourceRoot":"/source/"}