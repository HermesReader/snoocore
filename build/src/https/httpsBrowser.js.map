{"version":3,"sources":["https/httpsBrowser.js"],"names":[],"mappings":";;;;;;;;;;;oBAIiB,MAAM;;;;oBAEN,QAAQ;;;;;;qBAIV,UAAS,OAAO,EAAE,QAAQ,EAAE;;AAEzC,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AACxB,SAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;;AAExC,MAAI,IAAI,GAAG,kBAAK,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAElC,SAAO,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;;AAEnD,SAAO,kBAAK,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM,EAAE;;AAE5C,QAAI;;AAEF,UAAI,CAAC,GAAG,IAAI,MAAM,CAAC,cAAc,EAAE,CAAC;;AAEpC,UAAI,GAAG,GAAG,UAAU,GAAG,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC;;;AAGvD,UAAI,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE;AAC5B,WAAG,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;OACrC;;AAED,OAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;;AAElC,YAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAS,SAAS,EAAE;AACvD,SAAC,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;OAC3D,CAAC,CAAC;;AAEH,OAAC,CAAC,kBAAkB,GAAG,YAAW;AAChC,YAAI,CAAC,CAAC,UAAU,GAAG,CAAC,EAAE;;;AAGpB,iBAAO,CAAC,GAAG,CAAC,CAAC,CAAC,qBAAqB,EAAE,CAAC,CAAC;;AAEvC,iBAAO,OAAO,CAAC;AACb,iBAAK,EAAE,CAAC,CAAC,YAAY;AACrB,mBAAO,EAAE,CAAC,CAAC,MAAM;AACjB,oBAAQ,EAAE,CAAC,CAAC,qBAAqB,EAAE;WACpC,CAAC,CAAC;SACJ;OACF,CAAC;;AAEF,OAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;KAElE,CAAC,OAAO,CAAC,EAAE;AACV,aAAO,MAAM,CAAC,CAAC,CAAC,CAAC;KAClB;GAEF,CAAC,CAAC;CACJ","file":"https/httpsBrowser.js","sourcesContent":["//\n// Browser requests, mirrors the syntax of the node requests\n//\n\nimport when from 'when';\n\nimport form from './form';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#getAllResponseHeaders()\n\nexport default function(options, formData) {\n\n  options = options || {};\n  options.headers = options.headers || {};\n\n  var data = form.getData(formData);\n\n  options.headers['Content-Type'] = data.contentType;\n\n  return when.promise(function(resolve, reject) {\n\n    try {\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n      var x = new window.XMLHttpRequest();\n\n      var url = 'https://' + options.hostname + options.path;\n\n      // append the form data to the end of the url\n      if (options.method === 'GET') {\n        url += '?' + data.buffer.toString();\n      }\n\n      x.open(options.method, url, true);\n\n      Object.keys(options.headers).forEach(function(headerKey) {\n        x.setRequestHeader(headerKey, options.headers[headerKey]);\n      });\n\n      x.onreadystatechange = function() {\n        if (x.readyState > 3) {\n          // Normalize the result to match how requestNode.js works\n\n          console.log(x.getAllResponseHeaders());\n\n          return resolve({\n            _body: x.responseText,\n            _status: x.status,\n            _headers: x.getAllResponseHeaders()\n          });\n        }\n      };\n\n      x.send(options.method === 'GET' ? null : data.buffer.toString());\n\n    } catch (e) {\n      return reject(e);\n    }\n\n  });\n}\n"],"sourceRoot":"/source/"}