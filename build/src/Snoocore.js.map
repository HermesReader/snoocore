{"version":3,"sources":["Snoocore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;sBACmB,QAAQ;;;;oBACV,MAAM;;;;;;uBAGH,WAAW;;;;6BACL,iBAAiB;;;;wBACtB,YAAY;;;;0BACV,cAAc;;;;qBACnB,SAAS;;;;qBACV,cAAc;;;;IAEV,QAAQ;AAUhB,WAVQ,QAAQ,CAUf,iBAAiB,EAAE;;;0BAVZ,QAAQ;;AAWzB,+BAXiB,QAAQ,6CAWjB;;;AAGR,QAAI,CAAC,WAAW,GAAG,4BAAe,iBAAiB,CAAC,CAAC;;AAErD,QAAI,CAAC,SAAS,GAAG,0BAAa,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;;AAEzD,QAAI,CAAC,QAAQ,GAAG,yBAAY,IAAI,CAAC,SAAS,CAAC,CAAC;;;;;;;AAO5C,QAAI,CAAC,KAAK,GAAG,uBAAU,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxD,QAAI,CAAC,YAAY,GAAG,uBAAU,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;;;AAG/D,QAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACzE,QAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACzE,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7C,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACnD,QAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;AAEjD,QAAI,CAAC,cAAc,GAAG,+BAAkB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,YAAY,CAAC,CAAC;;;AAG3D,QAAI,CAAC,cAAc,CAAC,EAAE,CAAC,cAAc,EAAE,UAAC,aAAa,EAAK;AACxD,YAAK,IAAI,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;KAC1C,CAAC,CAAC;;AAEH,QAAI,CAAC,cAAc,CAAC,EAAE,CAAC,sBAAsB,EAAE,UAAC,aAAa,EAAK;AAChE,YAAK,IAAI,CAAC,sBAAsB,EAAE,aAAa,CAAC,CAAC;KAClD,CAAC,CAAC;;;;;;;AAOH,QAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;;AAE9D,QAAI,GAAG,YAAA,CAAC;AACR,SAAK,GAAG,IAAI,IAAI,EAAE;AAChB,UAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;KACvB;;AAED,WAAO,IAAI,CAAC;GACb;;YA9DkB,QAAQ;;eAAR,QAAQ;;SAET,YAAG;AACnB,aAAO,OAAO,CAAC;KAChB;;;;;;;;;;;;;OAEU,YAAU;wCAAN,IAAI;AAAJ,YAAI;;;AACjB,aAAO,kBAAK,KAAK,CAAC,IAAI,CAAC,CAAC;KACzB;;;SARkB,QAAQ;GAAS,oBAAO,YAAY;;qBAApC,QAAQ","file":"Snoocore.js","sourcesContent":["// Node.js libraries\nimport events from 'events';\nimport util from 'util';\n\n// Our modules\nimport Request from './Request';\nimport RedditRequest from './RedditRequest';\nimport Throttle from './Throttle';\nimport UserConfig from './UserConfig';\nimport OAuth from './OAuth';\nimport file from './https/file';\n\nexport default class Snoocore extends events.EventEmitter {\n\n  static get version() {\n    return '3.0.0';\n  }\n\n  static file(...args) {\n    return file.apply(args);\n  }\n\n  constructor(userConfiguration) {\n    super();\n\n    // @TODO - this is a \"god object\" of sorts.\n    this._userConfig = new UserConfig(userConfiguration);\n\n    this._throttle = new Throttle(this._userConfig.throttle);\n\n    this._request = new Request(this._throttle);\n\n    // Two OAuth instances. One for authenticated users, and another for\n    // Application only OAuth. Two are needed in the instance where\n    // a user wants to bypass authentication for a call - we don't want\n    // to waste time by creating a new app only instance, authenticating,\n    // etc.\n    this.oauth = new OAuth(this._userConfig, this._request);\n    this.oauthAppOnly = new OAuth(this._userConfig, this._request);\n\n    // Expose OAuth functions in here\n    this.getExplicitAuthUrl = this.oauth.getExplicitAuthUrl.bind(this.oauth);\n    this.getImplicitAuthUrl = this.oauth.getImplicitAuthUrl.bind(this.oauth);\n    this.auth = this.oauth.auth.bind(this.oauth);\n    this.refresh = this.oauth.refresh.bind(this.oauth);\n    this.deauth = this.oauth.deauth.bind(this.oauth);\n\n    this._redditRequest = new RedditRequest(this._userConfig,\n                                            this._request,\n                                            this.oauth,\n                                            this.oauthAppOnly);\n\n    // bubble up the events\n    this._redditRequest.on('server_error', (responseError) => {\n      this.emit('server_error', responseError);\n    });\n\n    this._redditRequest.on('access_token_expired', (responseError) => {\n      this.emit('access_token_expired', responseError);\n    });\n\n    /*\n       Make this._redditRequest.path the primary function that we return, but\n       stick the rest of the available functions on the prototype so we\n       can use them as well.\n     */\n    let path = this._redditRequest.path.bind(this._redditRequest);\n\n    let key;\n    for (key in this) {\n      path[key] = this[key];\n    }\n\n    return path;\n  }\n}\n"],"sourceRoot":"/source/"}